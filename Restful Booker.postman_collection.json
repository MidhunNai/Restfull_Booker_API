{
	"info": {
		"_postman_id": "0857253f-96a0-4f8a-a222-4211c6b7616d",
		"name": "Restful Booker",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27186910"
	},
	"item": [
		{
			"name": "Ping Health Check",
			"item": [
				{
					"name": "Verify if you  are getting status code of 201 for ping health check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Testing status code",
									"pm.test(\"Health Check Status is 201\", ()=>{",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"booker_url\",\"https://restful-booker.herokuapp.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{booker_url}}/ping",
							"host": [
								"{{booker_url}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify if you are getting response body string as Created for ping health check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Health Check Response is Created\", ()=>{",
									"    pm.expect(pm.response.text()).to.include(\"Created\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{booker_url}}/ping",
							"host": [
								"{{booker_url}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify if Response Header has content type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response have Content-Type header\", ()=>{ ",
									"    var headers = pm.response.headers;",
									"    pm.expect(headers.has(\"Content-Type\")).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{booker_url}}/ping",
							"host": [
								"{{booker_url}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify that value of Content-Type in Header is \"text/plain; charset=utf-8\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response have Content-Type header\", ()=>{ ",
									"    var headers = pm.response.headers;",
									"    pm.expect(headers.get(\"Content-type\")).to.include(\"text/plain; charset=utf-8\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{booker_url}}/ping",
							"host": [
								"{{booker_url}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify if Response time is lessthan 200ms",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less then 1500ms\", ()=>{",
									"    var responseTime = pm.response.responseTime;",
									"    pm.expect(responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{booker_url}}/ping",
							"host": [
								"{{booker_url}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify the response code when you send health ping endpoind with an incorrect HTTP method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Health Check Status with incorrect request method is 404\", ()=>{",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{booker_url}}/ping",
							"host": [
								"{{booker_url}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify that the health ping endpoint returns a 404 Not Found status code if the endpoint does not exist.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Health Check Status with incorrect request method is 404\", ()=>{",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{booker_url}}/ping-health",
							"host": [
								"{{booker_url}}"
							],
							"path": [
								"ping-health"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get All booking",
			"item": [
				{
					"name": "Verify if you  are getting status code of 201 for get all booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get all booking endpoint gives 200 Ok\", ()=>{",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomFirstName(length){",
									"    const alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";",
									"    let result = \"\";",
									"",
									"    for(let i = 0; i< length; i++){",
									"        const randomIndext= Math.floor(Math.random() * alphabet.length);",
									"        result += alphabet.charAt(randomIndext);",
									"    }",
									"    return result;",
									"}",
									"",
									"const firstName = generateRandomFirstName(8);",
									"const lastName = generateRandomFirstName(10);",
									"const currentDate = new Date();",
									"const date = currentDate.toDateString('en-US');",
									"const inputDate = new Date(date);",
									"const year = inputDate.getFullYear();",
									"const month = (inputDate.getMonth() + 1).toString().padStart(2, '0'); // Months are zero-indexed",
									"const day = inputDate.getDate().toString().padStart(2, '0');",
									"const todayDate = `${year}-${month}-${day}`;",
									"",
									"pm.collectionVariables.set(\"firstName\",firstName);",
									"pm.collectionVariables.set(\"lastName\",lastName);",
									"pm.collectionVariables.set(\"checkinDate\",todayDate);",
									"pm.collectionVariables.set(\"checkoutDate\",todayDate);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{booker_url}}/booking",
							"host": [
								"{{booker_url}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create bew booking to get new booking id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"bookingId\", jsonData.bookingid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstname\" : \"{{firstName}}\",\n    \"lastname\" : \"{{lastName}}\",\n    \"totalprice\" : 1000,\n    \"depositpaid\" : true,\n    \"bookingdates\" : {\n        \"checkin\" : \"{{checkinDate}}\",\n        \"checkout\" : \"{{checkinDate}}\"\n    },\n    \"additionalneeds\" : \"Breakfast\"\n}"
						},
						"url": {
							"raw": "{{booker_url}}/booking",
							"host": [
								"{{booker_url}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify if Response Header has content type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response have Content-Type header\", ()=>{ ",
									"    var headers = pm.response.headers;",
									"    pm.expect(headers.has(\"Content-Type\")).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{booker_url}}/booking",
							"host": [
								"{{booker_url}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify that value of Content-Type in Header is \"application/json; charset=utf-8\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response have Content-Type header\", ()=>{ ",
									"    var headers = pm.response.headers;",
									"    pm.expect(headers.get(\"Content-type\")).to.include(\"application/json; charset=utf-8\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{booker_url}}/booking",
							"host": [
								"{{booker_url}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify if Response time is less than 3000ms",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less then 3000ms\", ()=>{",
									"    var responseTime = pm.response.responseTime;",
									"    pm.expect(responseTime).to.be.below(3000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{booker_url}}/booking",
							"host": [
								"{{booker_url}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify the Response data type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Response data is array and booking id is number\", ()=>{",
									"    pm.expect(jsonData).to.be.an(\"array\");",
									"    pm.expect(jsonData[0].bookingid).to.be.a(\"number\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{booker_url}}/booking",
							"host": [
								"{{booker_url}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify that the get all booking endpoint returns a 404 Not Found status code if the endpoint does not exist.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get all booking with invalid endpoint gives 404 Not Found\", ()=>{",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{booker_url}}/booking-invalid",
							"host": [
								"{{booker_url}}"
							],
							"path": [
								"booking-invalid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify the response code when you send get all booking endpoind with an incorrect HTTP method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get All Booking endpoint with incorrect request method gives 404 Not Found\", ()=>{",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{booker_url}}/booking-invalid",
							"host": [
								"{{booker_url}}"
							],
							"path": [
								"booking-invalid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify that the response contains only the bookings that match the specified criteria.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Id is correct\", () => {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].bookingid).to.eql(pm.collectionVariables.get(\"bookingId\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{booker_url}}/booking?firstname={{firstName}}&lastname={{lastName}}",
							"host": [
								"{{booker_url}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "firstname",
									"value": "{{firstName}}"
								},
								{
									"key": "lastname",
									"value": "{{lastName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Filtering- Verify that the response contains only the bookings that match the specified criteria (checkin and checkout dates).",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{booker_url}}/booking?checkin=2014-03-13&checkout=2014-05-21",
							"host": [
								"{{booker_url}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "checkin",
									"value": "2014-03-13"
								},
								{
									"key": "checkout",
									"value": "2014-05-21"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create Booking",
			"item": [
				{
					"name": "Verify if you  are getting status code of 200 for Create booking endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\",  ()=> {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const headers = pm.response.headers;",
									"pm.test(\"Response have Content-Type header\",()=>{",
									"    pm.expect(headers.has(\"Content-Type\")).to.be.true;",
									"});",
									"",
									"pm.test(\"Response have Content-Type header\", ()=>{ ",
									"    pm.expect(headers.get(\"Content-type\")).to.include(\"application/json; charset=utf-8\");",
									"});",
									"",
									"pm.test(\"Response time is less than 2000ms\", () =>{",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"pm.test(\"Response data type is correct\", ()=>{",
									"    pm.expect(jsonData).to.be.an(\"object\");",
									"    pm.expect(jsonData.bookingid).to.be.a(\"number\");",
									"    pm.expect(jsonData.booking.firstname).to.be.a(\"string\");",
									"    pm.expect(jsonData.booking.bookingdates.checkin).to.be.a(\"string\");",
									"    pm.expect(jsonData.booking.bookingdates.checkout).to.be.a(\"string\");",
									"});",
									"",
									"const jsonSchema = {",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"title\": \"Generated schema for Root\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"bookingid\": {",
									"      \"type\": \"number\"",
									"    },",
									"    \"booking\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"firstname\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"lastname\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"totalprice\": {",
									"          \"type\": \"number\"",
									"        },",
									"        \"depositpaid\": {",
									"          \"type\": \"boolean\"",
									"        },",
									"        \"bookingdates\": {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"checkin\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"checkout\": {",
									"              \"type\": \"string\"",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"checkin\",",
									"            \"checkout\"",
									"          ]",
									"        },",
									"        \"additionalneeds\": {",
									"          \"type\": \"string\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"firstname\",",
									"        \"lastname\",",
									"        \"totalprice\",",
									"        \"depositpaid\",",
									"        \"bookingdates\",",
									"        \"additionalneeds\"",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"bookingid\",",
									"    \"booking\"",
									"  ]",
									"}",
									"",
									"pm.test(\"JSON Schema is valid\", ()=>{",
									"\tpm.expect(tv4.validate(jsonData,jsonSchema)).to.be.true;",
									"});",
									"",
									"pm.collectionVariables.set(\"bookingId\", jsonData.bookingid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstname\" : \"{{firstName}}\",\n    \"lastname\" : \"{{lastName}}\",\n    \"totalprice\" : 1000,\n    \"depositpaid\" : true,\n    \"bookingdates\" : {\n        \"checkin\" : \"{{checkinDate}}\",\n        \"checkout\" : \"{{checkinDate}}\"\n    },\n    \"additionalneeds\" : \"Breakfast\"\n}"
						},
						"url": {
							"raw": "{{booker_url}}/booking",
							"host": [
								"{{booker_url}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify that the Create Booking endpoint returns a 404 Not Found status code if the endpoint does not exist.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Create Booking with invalid endpoint gives 404 Not Found\", ()=>{",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstname\" : \"{{firstName}}\",\n    \"lastname\" : \"{{lastName}}\",\n    \"totalprice\" : 1000,\n    \"depositpaid\" : true,\n    \"bookingdates\" : {\n        \"checkin\" : \"{{checkinDate}}\",\n        \"checkout\" : \"{{checkinDate}}\"\n    },\n    \"additionalneeds\" : \"Breakfast\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{booker_url}}/booking-invalid",
							"host": [
								"{{booker_url}}"
							],
							"path": [
								"booking-invalid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify the response code when you send Create Booking endpoind with an incorrect HTTP method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Create Booking with invalid endpoint gives 404 Not Found\", ()=>{",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstname\" : \"{{firstName}}\",\n    \"lastname\" : \"{{lastName}}\",\n    \"totalprice\" : 1000,\n    \"depositpaid\" : true,\n    \"bookingdates\" : {\n        \"checkin\" : \"{{checkinDate}}\",\n        \"checkout\" : \"{{checkinDate}}\"\n    },\n    \"additionalneeds\" : \"Breakfast\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{booker_url}}/booking",
							"host": [
								"{{booker_url}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify that the response status code is 400 (Bad Request) when request body is missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Create Booking with invalid endpoint gives 404 Not Found\", ()=>{",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"var response = pm.response.text();",
									"pm.test(\"Response Body is Displaying Not Found\", ()=>{",
									"    pm.expect(response).to.be.eql(\"Not Found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{booker_url}}/booking-invalid",
							"host": [
								"{{booker_url}}"
							],
							"path": [
								"booking-invalid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify that the response status code is 422 (Unprocessable Entity) when sending invalid data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstname\" : 123456,\n    \"lastname\" : \"{{lastName}}\",\n    \"totalprice\" : 1000,\n    \"depositpaid\" : true,\n    \"bookingdates\" : {\n        \"checkin\" : \"{{checkinDate}}\",\n        \"checkout\" : \"{{checkinDate}}\"\n    },\n    \"additionalneeds\" : \"Breakfast\"\n}"
						},
						"url": {
							"raw": "{{booker_url}}/booking",
							"host": [
								"{{booker_url}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get Single Booking",
			"item": [
				{
					"name": "Verify if you  are getting status code of 200 oK for Get Single Booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", ()=> {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const headers = pm.response.headers;",
									"pm.test(\"Response have Content-Type header\",()=>{",
									"    pm.expect(headers.has(\"Content-Type\")).to.be.true;",
									"});",
									"",
									"pm.test(\"Resonse header is application/json; charset=utf-8\", ()=>{",
									"    pm.expect(headers.get(\"Content-Type\")).to.include(\"application/json; charset=utf-8\");",
									"});",
									"",
									"pm.test(\"Response time is less than 2000ms\", ()=>{",
									"    var responseTime = pm.response.responseTime;",
									"    pm.expect(responseTime).to.be.below(2000);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"pm.test(\"Response data type is correct\", ()=>{",
									"    pm.expect(jsonData).to.be.an(\"object\");",
									"    pm.expect(jsonData.firstname).to.be.a(\"string\");",
									"    pm.expect(jsonData.lastname).to.be.a(\"string\");",
									"    pm.expect(jsonData.bookingdates.checkin).to.be.a(\"string\");",
									"    pm.expect(jsonData.bookingdates.checkout).to.be.a(\"string\");",
									"});",
									"",
									"//JSON Schema Validating",
									"var jsonSchema = {",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"title\": \"Generated schema for Root\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"firstname\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"lastname\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"totalprice\": {",
									"      \"type\": \"number\"",
									"    },",
									"    \"depositpaid\": {",
									"      \"type\": \"boolean\"",
									"    },",
									"    \"bookingdates\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"checkin\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"checkout\": {",
									"          \"type\": \"string\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"checkin\",",
									"        \"checkout\"",
									"      ]",
									"    },",
									"    \"additionalneeds\": {",
									"      \"type\": \"string\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"firstname\",",
									"    \"lastname\",",
									"    \"totalprice\",",
									"    \"depositpaid\",",
									"    \"bookingdates\",",
									"    \"additionalneeds\"",
									"  ]",
									"}",
									"",
									"pm.test(\"JSON Schema is valid\", ()=>{",
									"        pm.expect(tv4.validate(jsonData,jsonSchema)).to.be.true;",
									"});",
									"",
									"pm.test(\"Response data is correct for the bookingid\" + pm.collectionVariables.get(\"bookingId\"), ()=>{",
									"    pm.expect(jsonData.firstname).to.eql(pm.collectionVariables.get(\"firstName\"));",
									"    pm.expect(jsonData.lastname).to.eql(pm.collectionVariables.get(\"lastName\"));",
									"    pm.expect(jsonData.bookingdates.checkin).to.eql(pm.collectionVariables.get(\"checkinDate\"));",
									"    pm.expect(jsonData.bookingdates.checkout).to.eql(pm.collectionVariables.get(\"checkoutDate\"));",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{booker_url}}/booking/{{bookingId}}",
							"host": [
								"{{booker_url}}"
							],
							"path": [
								"booking",
								"{{bookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify that the Get Single Booking endpoint returns a 404 Not Found status code if the endpoint does not exist.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get Single Booking with invalid endpoint gives 404 Not Found\", ()=>{",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{booker_url}}/booking-invalid/{{bookingId}}",
							"host": [
								"{{booker_url}}"
							],
							"path": [
								"booking-invalid",
								"{{bookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify the response code when you send Get Single Booking endpoind with an incorrect HTTP method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get Single Booking with invalid request type gives 404 Not Found\", ()=>{",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{booker_url}}/booking/{{bookingId}}",
							"host": [
								"{{booker_url}}"
							],
							"path": [
								"booking",
								"{{bookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify that the Get Single Booking endpoint returns a 404 Not Found status code if booking id does not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get Single Booking when booking id does not exist gives 404 Not Found\", ()=>{",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{booker_url}}/booking/10920848974",
							"host": [
								"{{booker_url}}"
							],
							"path": [
								"booking",
								"10920848974"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify that the Get Single Booking endpoint returns a 404 Not Found status code if invalid format for the booking id is sent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get Single Booking with invalid format of booking id gives 404 Not Found\", ()=>{",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{booker_url}}/booking/abcdef",
							"host": [
								"{{booker_url}}"
							],
							"path": [
								"booking",
								"abcdef"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update Booking",
			"item": []
		},
		{
			"name": "Delete Booking",
			"item": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "booker_url",
			"value": ""
		},
		{
			"key": "firstName",
			"value": ""
		},
		{
			"key": "lastName",
			"value": ""
		},
		{
			"key": "checkinDate",
			"value": ""
		},
		{
			"key": "checkoutDate",
			"value": ""
		},
		{
			"key": "bookingId",
			"value": ""
		}
	]
}