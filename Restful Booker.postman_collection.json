{
	"info": {
		"_postman_id": "0857253f-96a0-4f8a-a222-4211c6b7616d",
		"name": "Restful Booker",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27186910"
	},
	"item": [
		{
			"name": "Ping Health Check",
			"item": [
				{
					"name": "Verify if you  are getting status code of 201 for ping health check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Testing status code",
									"pm.test(\"Health Check Status is 201\", ()=>{",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"booker_url\",\"https://restful-booker.herokuapp.com\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{booker_url}}/ping",
							"host": [
								"{{booker_url}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify if you are getting response body string as Created for ping health check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Health Check Response is Created\", ()=>{",
									"    pm.expect(pm.response.text()).to.include(\"Created\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{booker_url}}/ping",
							"host": [
								"{{booker_url}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify if Response Header has content type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response have Content-Type header\", ()=>{ ",
									"    var headers = pm.response.headers;",
									"    pm.expect(headers.has(\"Content-Type\")).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{booker_url}}/ping",
							"host": [
								"{{booker_url}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify that value of Content-Type in Header is \"text/plain; charset=utf-8\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response have Content-Type header\", ()=>{ ",
									"    var headers = pm.response.headers;",
									"    pm.expect(headers.get(\"Content-type\")).to.include(\"text/plain; charset=utf-8\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{booker_url}}/ping",
							"host": [
								"{{booker_url}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify if Response time is lessthan 200ms",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less then 1500ms\", ()=>{",
									"    var responseTime = pm.response.responseTime;",
									"    pm.expect(responseTime).to.be.below(500);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{booker_url}}/ping",
							"host": [
								"{{booker_url}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify the response code when you send health ping endpoind with an incorrect HTTP method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Health Check Status with incorrect request method is 404\", ()=>{",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{booker_url}}/ping",
							"host": [
								"{{booker_url}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify that the health ping endpoint returns a 404 Not Found status code if the endpoint does not exist.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Health Check Status with incorrect request method is 404\", ()=>{",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{booker_url}}/ping-health",
							"host": [
								"{{booker_url}}"
							],
							"path": [
								"ping-health"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get All booking",
			"item": [
				{
					"name": "Verify if you  are getting status code of 201 for get all booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get all booking endpoint gives 200 Ok\", ()=>{",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{booker_url}}/booking",
							"host": [
								"{{booker_url}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify if Response Header has content type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response have Content-Type header\", ()=>{ ",
									"    var headers = pm.response.headers;",
									"    pm.expect(headers.has(\"Content-Type\")).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{booker_url}}/booking",
							"host": [
								"{{booker_url}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify that value of Content-Type in Header is \"application/json; charset=utf-8\"",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response have Content-Type header\", ()=>{ ",
									"    var headers = pm.response.headers;",
									"    pm.expect(headers.get(\"Content-type\")).to.include(\"application/json; charset=utf-8\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{booker_url}}/booking",
							"host": [
								"{{booker_url}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify if Response time is less than 3000ms",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less then 3000ms\", ()=>{",
									"    var responseTime = pm.response.responseTime;",
									"    pm.expect(responseTime).to.be.below(3000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{booker_url}}/booking",
							"host": [
								"{{booker_url}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify the Response data type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Response data is array and booking id is number\", ()=>{",
									"    pm.expect(jsonData).to.be.an(\"array\");",
									"    pm.expect(jsonData[0].bookingid).to.be.a(\"number\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{booker_url}}/booking",
							"host": [
								"{{booker_url}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify the Response data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Response data is correct\", ()=>{",
									"    pm.expect(jsonData[0].bookingid).to.eql(973);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{booker_url}}/booking",
							"host": [
								"{{booker_url}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify that the get all booking endpoint returns a 404 Not Found status code if the endpoint does not exist.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get all booking with invalid endpoint gives 404 Not Found\", ()=>{",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{booker_url}}/booking-invalid",
							"host": [
								"{{booker_url}}"
							],
							"path": [
								"booking-invalid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify the response code when you send get all booking endpoind with an incorrect HTTP method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get All Booking endpoint with incorrect request method gives 404 Not Found\", ()=>{",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{booker_url}}/booking-invalid",
							"host": [
								"{{booker_url}}"
							],
							"path": [
								"booking-invalid"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify that the response contains only the bookings that match the specified criteria.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Id of Midhun Nair is 2421\",()=>{",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].bookingid).to.be.eql(\"2421\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{booker_url}}/booking?firstname=Midhun&lastname=Nair",
							"host": [
								"{{booker_url}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "firstname",
									"value": "Midhun"
								},
								{
									"key": "lastname",
									"value": "Nair"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Filtering- Verify that the response contains only the bookings that match the specified criteria (checkin and checkout dates).",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{booker_url}}/booking?checkin=2014-03-13&checkout=2014-05-21",
							"host": [
								"{{booker_url}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "checkin",
									"value": "2014-03-13"
								},
								{
									"key": "checkout",
									"value": "2014-05-21"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get Single Booking",
			"item": []
		},
		{
			"name": "Update Booking",
			"item": []
		},
		{
			"name": "Delete Booking",
			"item": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "booker_url",
			"value": ""
		}
	]
}